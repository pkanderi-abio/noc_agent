Metadata-Version: 2.4
Name: noc_agent
Version: 0.1.0
Summary: Network Operations Center agent with scanning, anomaly detection, and API
Home-page: https://github.com/your_org/noc_agent
Author: Your Name
Author-email: support@hhitsolutions.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: python-nmap
Requires-Dist: scapy
Requires-Dist: pyshark
Requires-Dist: cryptography
Requires-Dist: PyYAML
Requires-Dist: joblib
Requires-Dist: scikit-learn
Requires-Dist: fastapi
Requires-Dist: uvicorn
Requires-Dist: pandas
Requires-Dist: prometheus_client
Requires-Dist: python-jose[cryptography]
Requires-Dist: passlib[bcrypt]
Requires-Dist: SQLAlchemy
Requires-Dist: alembic
Requires-Dist: pytest
Requires-Dist: pytest-asyncio
Requires-Dist: httpx
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# README.md (excerpt)
```markdown
## Dynamic User Management

### List Users (admin)
```bash
curl -H "Authorization: Bearer <token>" http://localhost:8000/users
```

### Create User (admin)
```bash
curl -X POST -H "Authorization: Bearer <token>" \
  -d "username=jane&password=secret&roles=user" \
  http://localhost:8000/users
```

### Delete User (admin)
```bash
curl -X DELETE -H "Authorization: Bearer <token>" \
  http://localhost:8000/users/jane
```

### Reset Password (admin)
```bash
curl -X POST -H "Authorization: Bearer <token>" \
  -d "new_password=newsecret" \
  http://localhost:8000/users/jane/reset_password
```

### Update Roles (admin)
```bash
curl -X PUT -H "Authorization: Bearer <token>" \
  -d "roles=admin user" \
  http://localhost:8000/users/jane/roles
  
# NOC Agent

[![CI](https://github.com/your_org/noc_agent/actions/workflows/ci.yml/badge.svg)]()

## Setup Database Migrations

Initialize Alembic (if first time):
```bash
alembic init alembic
```

Ensure `alembic.ini` has `script_location = alembic` and `sqlalchemy.url` points to your DB URL (or use:
```bash
export SQLALCHEMY_URL=sqlite:///./noc_agent.db
```

Create an initial migration:
```bash
alembic revision --autogenerate -m "initial models"
``` 
Apply migrations:
```bash
alembic upgrade head
```

Alternatively, you can create tables directly:
```bash
python - << 'EOF'
from agent.db import init_db
init_db()
EOF
```
## Run Tests

Install pytest:
```bash
pip install pytest
```

Then:
```bash
pytest --maxfail=1 --disable-warnings -q
```

## Installation

```bash
pip install .
# build executable:
pyinstaller noc_agent.spec
# build Docker image:
docker build -t noc_agent:latest .
```

## Configuration

Edit `config.yaml` or set `$NOC_AGENT_CONFIG`. 
- **database.url**: connection string for SQL DB.  
- **auth_defaults.initial_users**: created at first launch.  
- **rbac.roles**: map roles to endpoint permissions.

## Dynamic User Management

### List Users (admin)
```bash
curl -H "Authorization: Bearer <token>" http://localhost:8000/users
```

### Create User (admin)
```bash
curl -X POST -H "Authorization: Bearer <token>" \
  -d "username=jane&password=secret&roles=user" \
  http://localhost:8000/users
```
## Future

- SSO/OIDC integration for single sign-on.

## CLI Training

```bash
python train_anomaly.py --data-file path/to/data.csv [--save-path models/model.pkl]
```

## API Usage

Start server:
```bash
uvicorn agent.api:app --reload
```

### OAuth2 Authentication

Obtain token:
```bash
curl -X POST http://localhost:8000/token \
    -d "username=alice" -d "password=YOUR_PWD"
```

Use in calls:
```bash
curl -H "Authorization: Bearer <token>" http://localhost:8000/model_info
```

### Endpoints and Permissions

| Endpoint        | Roles Allowed           |
| --------------- | ----------------------- |
| GET /health     | public                  |
| POST /token     | public                  |
| GET /model_info | admin                   |
| POST /train     | admin                   |
| POST /infer     | admin, user             |
| POST /scan      | admin, user             |
| POST /capture_once | admin, user          |
| GET /metrics    | public                  |
| WS /ws/packets  | admin                   |

### Metrics

Prometheus scrape at `GET /metrics`.
